#!/usr/bin/env python3

## Quick script for adjusting keyboard and screen backlight. https://github.com/ionor 

import dbus
import sys
import os

BACKLIGHTPATH = "/sys/class/backlight/intel_backlight/"

## DISPLAY PART

def _disp_get_value(name):
    try:
        with open(os.path.join(BACKLIGHTPATH, name), "r") as f:
            return f.read()
    except (OSError, IOError) as err:
        if err.errno == 13:
            print("Error: Permission error")
            sys.exit()

def _disp_set_value(name, value):
    try:
        with open(os.path.join(BACKLIGHTPATH, name), "w") as f:
            f.write(str(value))
    except (OSError, IOError) as err:
        if err.errno == 13:
            print("Error: Permission error")
            sys.exit()

def disp_get_actual_in_perc():
    
    actual = int(_disp_get_value('actual_brightness'))
    maximum = disp_get_max()

    in_perc = round(100 * (actual/maximum))

    return in_perc

def disp_get_actual():
    
    actual = int(_disp_get_value('actual_brightness'))
    maximum = disp_get_max()

    in_perc = round(100 * (actual/maximum))

    #return in_perc
    return int(_disp_get_value("actual_brightness"))

def disp_get_max():
    return int(_disp_get_value("max_brightness"))

def disp_set(value):
    max_value = disp_get_max()
    
    new = _calculate(value, disp_get_actual(), disp_get_max())

    _disp_set_value("brightness", new)
    return round(100*new/max_value)

def _calculate(value, current, maximum):
    nvalue = str(value)
    nvalue = nvalue.replace('%','')

    if nvalue[0] in ['+','-']:
        direction = nvalue[0]
        the_value = nvalue[1:]

    else:
        direction = '/'
        the_value = nvalue
    
    try: 
        the_value = int(the_value)
    except ValueError:
        _show_usage('Did not understand value. Please write in form (+/-)percentage')
        sys.exit() 

    current_in_perc = round(100* current / maximum)

    if direction == '+':
        #the_change = current_in_perc + the_value
        the_change = max(0, min(current_in_perc + the_value, 100))
        new = round((the_change/100) * maximum) 
        
    elif direction == '-':
        #the_change = current_in_perc - the_value
        the_change = max(0, min(current_in_perc - the_value, 100))
        new = round((the_change/100) * maximum) 

    elif direction == '/':
        the_change = 0
        if 0 <= the_value <= 100:
            new = round((the_value/100) * maximum) 
        else:
            _show_usage('Value out of bound. Must be between 0 and 100')
            sys.exit()

    return new

## KEYBOARD PART
def kb_set_value(value):
    bus = dbus.SystemBus()
    kbd_backlight_proxy = bus.get_object('org.freedesktop.UPower', '/org/freedesktop/UPower/KbdBacklight')
    kbd_backlight = dbus.Interface(kbd_backlight_proxy, 'org.freedesktop.UPower.KbdBacklight')

    current = kbd_backlight.GetBrightness()
    maximum = kbd_backlight.GetMaxBrightness()

    new = _calculate(value,current,maximum)
    
    kbd_backlight.SetBrightness(new)
    return new

def kb_get_value():
    bus = dbus.SystemBus()
    kbd_backlight_proxy = bus.get_object('org.freedesktop.UPower', '/org/freedesktop/UPower/KbdBacklight')
    kbd_backlight = dbus.Interface(kbd_backlight_proxy, 'org.freedesktop.UPower.KbdBacklight')

    current = kbd_backlight.GetBrightness()
    maximum = kbd_backlight.GetMaxBrightness()

    return round(100 * current / maximum)

def _show_usage(errormessage=''):

    if errormessage != '':
        print(errormessage)
        print('')

    print('backlight.py [device] [action] [value]')
    print('[device]')
    print('display')
    print('keyboard')
    print('')
    print('[actions]')
    print('get           - get current value')
    print('set           - set new value')
    print('')
    print('[value]')
    print('+X            - increase backlightning')
    print('-X            - decrease backlightning')
    print(' X            - set fixed value. 0-100')
    print('')

# MAIN PART
if __name__ ==  '__main__':
    if len(sys.argv) == 1:
            _show_usage()

    elif (len(sys.argv) > 1) & (sys.argv[1] in ['keyboard','display']):

        if (len(sys.argv) == 2) & (sys.argv[1] in ['keyboard','display']):
            _show_usage('No action specified')

        elif (len(sys.argv) >= 3) & (sys.argv[1] == 'keyboard'):
            if sys.argv[2] == 'set':
                print(kb_set_value(str(sys.argv[3])))        

            elif sys.argv[2] == 'get':
                print(kb_get_value())

            else:
                _show_usage('Wrong action specified')

        elif (len(sys.argv) >= 3) & (sys.argv[1] == 'display'):
            if sys.argv[2] == 'set':
                print(disp_set(str(sys.argv[3])))

            elif sys.argv[2] == 'get':
                print(disp_get_actual_in_perc())
            else:
                _show_usage('Wrong action specified')

    else:
        _show_usage('Wrong or no device specified')



