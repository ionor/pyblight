#!/usr/bin/env python3
# BSD 3-Clause License
#
# Copyright (c) 2018, ionor
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import os
import configparser

config = configparser.ConfigParser()
runtime = configparser.ConfigParser()

#BACKLIGHTPATH = "/sys/class/backlight/intel_backlight/"
#KEYBOARDPATH  = "/sys/class/leds/smc::kbd_backlight/"
RUNTIMEFILE = os.environ.get('XDG_RUNTIME_DIR')+'/'+'pyblight'
#CONFIGFILE = os.environ.get('XDG_CONFIG_HOME','/etc/xdg')+'/pyblight/'+'config'

CONFIGFILE = None
CONFIGFILES = [os.environ.get('XDG_CONFIG_HOME')+'/pyblight/config', '/etc/xdg/pyblight/config']

for x in CONFIGFILES:
    if os.path.isfile(x):
        CONFIGFILE = x
        break

if CONFIGFILE is None:
    _show_usage(errormessage='No configuration files found')

config.read(CONFIGFILE)
BACKLIGHTPATH = config['Main']['display_backlight'].strip('"')
KEYBOARDPATH = config['Main']['keyboard_backlight'].strip('"')

def _restore_runtime_value():
    try:
        runtime.read(RUNTIMEFILE)
        dsp = runtime['Temp']['display']
        kbd = runtime['Temp']['keyboard']
        
        return (dsp, kbd)

    except:
        pass

def _save_runtime_value():
    runtime['Temp'] = {}
    runtime['Temp']['display'] = str(disp_get_actual_in_perc())
    runtime['Temp']['keyboard'] = str(kbd_get_actual_in_perc())

    with open(RUNTIMEFILE,'w') as f:
        runtime.write(f)


def _get_value(the_path,name):
    try:
        with open(os.path.join(the_path, name), "r") as f:
            return f.read()
    except (OSError, IOError) as err:
        if err.errno == 13:
            print("Error: Permission error")
            sys.exit()

def _set_value(the_path, name, value):
    if (len(sys.argv) == 5): 
        if (sys.argv[4] == '--dont-store'):
            pass
    else:
        _save_runtime_value()

    try:
        with open(os.path.join(the_path, name), "w") as f:
            f.write(str(value))
    except (OSError, IOError) as err:
        if err.errno == 13:
            print("Error: Permission error")
            sys.exit()

def disp_get_actual_in_perc():
    actual = int(_get_value(BACKLIGHTPATH,'actual_brightness'))
    maximum = disp_get_max()

    in_perc = round(100 * (actual/maximum))

    return in_perc

def disp_get_actual():
    actual = int(_get_value(BACKLIGHTPATH,'actual_brightness'))
   # maximum = disp_get_max()
    #in_perc = round(100 * (actual/maximum))

    return actual

def disp_get_max():
    return int(_get_value(BACKLIGHTPATH, "max_brightness"))

def disp_set(value):
    max_value = disp_get_max()
    
    new = _calculate(value, disp_get_actual(), disp_get_max())

    _set_value(BACKLIGHTPATH, "brightness", new)
    return round(100*new/max_value)


def kbd_get_actual_in_perc():
    actual = int(_get_value(KEYBOARDPATH,'brightness'))
    maximum = kbd_get_max()

    in_perc = round(100 * (actual/maximum))
    return in_perc


def kbd_get_actual():
    actual = int(_get_value(KEYBOARDPATH,'brightness'))
    return actual


def kbd_get_max():
    return int(_get_value(KEYBOARDPATH, "max_brightness"))

def kbd_set(value):
    max_value = kbd_get_max()
    new = _calculate(value, kbd_get_actual(), kbd_get_max())
    _set_value(KEYBOARDPATH, "brightness", new)

    return round(100*new/max_value)


def _calculate(value, current, maximum):
    nvalue = str(value)
    nvalue = nvalue.replace('%','')

    if nvalue[0] in ['+','-']:
        direction = nvalue[0]
        the_value = nvalue[1:]

    else:
        direction = '/'
        the_value = nvalue
    
    try: 
        the_value = int(the_value)
    except ValueError:
        _show_usage('Did not understand value. Please write in form (+/-)percentage')
        sys.exit() 

    current_in_perc = round(100* current / maximum)

    if direction == '+':
        #the_change = current_in_perc + the_value
        the_change = max(0, min(current_in_perc + the_value, 100))
        new = round((the_change/100) * maximum) 
        
    elif direction == '-':
        #the_change = current_in_perc - the_value
        the_change = max(0, min(current_in_perc - the_value, 100))
        new = round((the_change/100) * maximum) 

    elif direction == '/':
        the_change = 0
        if 0 <= the_value <= 100:
            new = round((the_value/100) * maximum) 
        else:
            _show_usage('Value out of bound. Must be between 0 and 100')
            sys.exit()

    return new


def _show_usage(errormessage=''):

    if errormessage != '':
        print(errormessage)
        print('')

    print('pyblight [device] [action] [value] [optionals]')
    print('')
    print('[device]')
    print('   display')
    print('   keyboard')
    print('')
    print('[actions]')
    print('   get                           - get current value')
    print('   set                           - set new value')
    print('')
    print('[value]')
    print('   +X                            - increase backlightning')
    print('   -X                            - decrease backlightning')
    print('    X                            - set fixed value. 0-100')
    print('')
    print('[optionals]')
    print('    --dont-store                 - set value but dont store')
    print('')
    print('Other alternatives')
    print('   usage                         - show this text')
    print('   version                       - shows version and exits')
    print('   restore                       - restores previous value')
    print('   store                         - stores current value')
    print('')


# MAIN PART
if __name__ ==  '__main__':
    if len(sys.argv) == 1:
            _show_usage()

    elif (len(sys.argv) > 1) & (sys.argv[1] in ['keyboard','display']):

        if (len(sys.argv) == 2) & (sys.argv[1] in ['keyboard','display']):
            _show_usage('No action specified')

        elif (len(sys.argv) >= 3) & (sys.argv[1] == 'keyboard'):
            if sys.argv[2] == 'set':
                if len(sys.argv) > 3:
                    kbd_set(str(sys.argv[3]))
                else:
                    _show_usage('No value supplied')

            elif sys.argv[2] == 'get':
                print(kbd_get_actual_in_perc())

            else:
                _show_usage('Wrong action specified')

        elif (len(sys.argv) >= 3) & (sys.argv[1] == 'display'):
            if sys.argv[2] == 'set':
                if len(sys.argv) > 3:
                    disp_set(str(sys.argv[3]))
                else:
                    _show_usage('No value supplied')
            elif sys.argv[2] == 'get':
                print(disp_get_actual_in_perc())
            else:
                _show_usage('Wrong action specified')

    elif (len(sys.argv) > 1) & (sys.argv[1] in ['restore','store']):
        if sys.argv[1] == 'restore':
            dsp, kbd = _restore_runtime_value()
            disp_set(dsp)
            kbd_set(kbd)

        elif sys.argv[1] == 'store':
            _save_runtime_value()
    else:
        _show_usage('Wrong or no device specified')
